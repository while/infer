% ------------------------------------------------------------------------------
% 
% ------------------------------------------------------------------------------
-module(infer_dists).

-export([]).

% OBS debugging only!!
-compile(export_all).


% ==============================================================================
%
%  Normal distribution
%
% ==============================================================================

% ------------------------------------------------------------------------------
%  normpdf - Normal probability density function
% ------------------------------------------------------------------------------
normpdf(X,Mu,Sig) ->
        (0.398942280401432678/Sig)*math:exp(-0.5*math:pow((X - Mu)/Sig, 2)).

% ------------------------------------------------------------------------------
%  normcdf - Normal cumulative distribution function
% ------------------------------------------------------------------------------
normcdf(X,Mu,Sig) ->
        0.5*erfc(-0.707106781186547524*(X-Mu)/Sig).
        
% ------------------------------------------------------------------------------
%  norminv - Inverse normal distribution function
% ------------------------------------------------------------------------------
norminv(P,Mu,Sig) when P < 0 orelse P > 1 -> {error,"Invalid probability"};
norminv(P,Mu,Sig) ->
        -1.41421356237309505*Sig*inverfc(2*P)+Mu.

% ------------------------------------------------------------------------------
%  Complementary error function 
% ------------------------------------------------------------------------------
erfc(X) -> 
        1 - math:erf(X).

% ------------------------------------------------------------------------------
%  Inverse complementary error function
% ------------------------------------------------------------------------------
inverfc(P) when P >= 2 -> -100;
inverfc(P) when P =< 0 ->  100;
inverfc(P) ->
        PP = if P <  1 -> P
              ; P >= 1 -> 2 - P
             end,
        io:format("PP: ~f~n", [PP]),
        T = math:sqrt(-2*math:log(PP/2)),
        io:format("T: ~f~n", [T]),
        X0 = -0.70711*((2.30753+T*0.27061)/(1+T*(0.99229+T*0.04481)) - T),
        io:format("X0: ~f~n", [X0]),
        Err1 = erfc(X0) - PP,
        X1 = X0 + Err1/(1.12837916709551257*math:exp(-X0*X0)-X0*Err1),
        Err2 = erfc(X1) - PP,
        X2 = X1 + Err2/(1.12837916709551257*math:exp(-X1*X1)-X1*Err2),
        if P <  1 -> X2
         ; P >= 1 -> -X2
        end.

