% ==============================================================================
%  Error function
% ==============================================================================
-module(erf).

-export([erfc/1, inverfc/1]).

% ------------------------------------------------------------------------------
%  Complementary error function 
% ------------------------------------------------------------------------------
erfc(X) -> 
        1 - math:erf(X).

% ------------------------------------------------------------------------------
%  Inverse complementary error function
% ------------------------------------------------------------------------------
inverfc(P) when P >= 2 -> -100;
inverfc(P) when P =< 0 ->  100;
inverfc(P) ->
        PP = if P <  1 -> P
              ; P >= 1 -> 2 - P
             end,
        T = math:sqrt(-2*math:log(PP/2)),
        X0 = -0.70711*((2.30753+T*0.27061)/(1+T*(0.99229+T*0.04481)) - T),
        Err1 = erfc(X0) - PP,
        X1 = X0 + Err1/(1.12837916709551257*math:exp(-X0*X0)-X0*Err1),
        Err2 = erfc(X1) - PP,
        X2 = X1 + Err2/(1.12837916709551257*math:exp(-X1*X1)-X1*Err2),
        if P <  1 -> X2
         ; P >= 1 -> -X2
        end.


% ==============================================================================
%  EUnit tests
% ------------------------------------------------------------------------------
-ifdef(TEST).

erfc_test() ->
        ?assertEqual(0.0, erfc(100)),
        ?assertEqual(1.0, erfc(0)),
        ?assertEqual(2.0, erfc(-100)).


inverfc_test() ->
        ?assertEqual(100, inverfc(0)),
        ?assertEqual(0.3708071585935579, inverfc(0.6)),
        ?assert(1.0e-16 >= inverfc(1)),
        ?assertEqual(-0.3708071585935579, inverfc(1.4)),
        ?assertEqual(-100, inverfc(2)).

-endif.
